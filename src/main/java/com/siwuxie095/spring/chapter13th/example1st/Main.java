package com.siwuxie095.spring.chapter13th.example1st;

/**
 * @author Jiajing Li
 * @date 2021-03-05 08:18:18
 */
public class Main {

    /**
     * 缓存数据
     *
     * 你有没有遇到过有人反复问你同一个问题的场景，你刚刚给出完解答，马上就会被问相同的问题？小孩子经常会问
     * 这样的问题：
     * （1）"我能吃点糖吗？"
     * （2）"现在几点了？"
     * （3）"我们到了吗？"
     * （4）"我能吃点糖吗？"
     *
     * 从很多方面看来，在编写的应用中，有些的组件也是这样的。无状态的组件一般来讲扩展性会更好一些，但它们也
     * 会更加倾向于一遍遍地问相同的问题。因为它们是无状态的，所以一旦当前的任务完成，就会丢弃掉已经获取到的
     * 所有解答，下一次需要相同的答案时，它们就不得不再问一遍这个问题。
     *
     * 对于所提出的问题，有时候需要一点时间进行获取或计算才能得到答案。可能需要在数据库中获取数据，调用远程
     * 服务或者执行复杂的计算。为了得到答案，这就会花费时间和资源。
     *
     * 如果问题的答案变更不那么频繁（或者根本不会发生变化），那么按照相同的方式再去获取一遍就是一种浪费了。
     * 除此之外，这样做还可能会对应用的性能产生负面的影响。一遍又一遍地问相同的问题，而每次得到的答案都是
     * 一样的，与其这样，还不如只问一遍并将答案记住，以便稍后再次需要时使用。
     *
     * 缓存（Caching）可以存储经常会用到的信息，这样每次需要的时候，这些信息都是立即可用的。在这里，将会
     * 了解到 Spring 的缓存抽象。尽管 Spring 自身并没有实现缓存解决方案，但是它对缓存功能提供了声明式的
     * 支持，能够与多种流行的缓存实现进行集成。
     */
    public static void main(String[] args) {

    }

}
