package com.siwuxie095.spring.chapter4th.example2nd;

/**
 * @author Jiajing Li
 * @date 2021-01-13 08:28:20
 */
public class Main {

    /**
     * 什么是面向切面编程
     *
     * 切面有助于模块化横切关注点。简而言之，横切关注点可以被描述为影响应用多处的功能。例如，安全就是一个横切关注点，应用中
     * 的许多方法都会涉及到安全规则。
     *
     * PS：切面实现了横切关注点（跨多个应用对象的逻辑）的模块化。
     *
     * 在一个被划分为模块的典型应用中，每个模块的核心功能都是为特定业务领域提供服务，但是这些模块都需要类似的辅助功能，例如
     * 安全和事务管理。
     *
     * 如果要重用通用功能的话，最常见的面向对象技术是继承（inheritance）或委托（delegation）。但是，如果在整个应用中都使
     * 用相同的基类，继承往往会导致一个脆弱的对象体系，而使用委托可能需要对委托对象进行复杂的调用。
     *
     * 切面提供了取代继承和委托的另一种可选方案，而且在很多场景下更清晰简洁。在使用面向切面编程时，仍然在一个地方定义通用功能，
     * 但是可以通过声明的方式定义这个功能要以何种方式在何处应用，而无需修改受影响的类。横切关注点可以被模块化为特殊的类，这些
     * 类被称为切面（aspect）。这样做有两个好处：
     * （1）首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；
     * （2）其次，服务模块更简洁，因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了。
     */
    public static void main(String[] args) {

    }

}
